# -*- coding: utf-8 -*-
"""Project_1B_ Project_Template.ipynb
Automatically generated by Colaboratory.
# Part I. ETL Pipeline for Pre-Processing the Files

## PLEASE RUN THE FOLLOWING CODE FOR PRE-PROCESSING THE FILES
#### Import Python packages
"""

import pandas as pd
import cassandra
import re
import os
import glob
import numpy as np
import json
import csv

"""#### Creating list of filepaths to process original event csv data files
1. checking current working directory 
2. Get current folder and subfolder event data
3. Create a for loop to create a list of files and collect each filepath
4. join the file path and roots with the subdirectories using glob
"""

print(os.getcwd())
filepath = os.getcwd() + '/event_data'
for root, dirs, files in os.walk(filepath):
    file_path_list = glob.glob(os.path.join(root,'*'))
    print(file_path_list)

"""#### Processing the files to create the data file csv that will be used for Apache Casssandra tables
1. initiating an empty list of rows that will be generated from each file
2. for every filepath in the file path list 
3. reading csv file 
4. extracting each data row one by one and append it        
5. creating a smaller event data csv file called event_datafile_full csv that will be used to insert data into the  Apache Cassandra tables
"""

full_data_rows_list = [] 

for f in file_path_list:
    with open(f, 'r', encoding = 'utf8', newline='') as csvfile: 
        csvreader = csv.reader(csvfile) 
        next(csvreader)     
        for line in csvreader:
            full_data_rows_list.append(line) 
            
print(len(full_data_rows_list))
print(full_data_rows_list[0])

csv.register_dialect('myDialect', quoting=csv.QUOTE_ALL, skipinitialspace=True)

with open('event_datafile_new.csv', 'w', encoding = 'utf8', newline='') as f:
    writer = csv.writer(f, dialect='myDialect')
    writer.writerow(['artist','firstName','gender','itemInSession','lastName','length',\
                'level','location','sessionId','song','userId'])
    for row in full_data_rows_list:
        if (row[0] == ''):
            continue
        writer.writerow((row[0], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[12], row[13], row[16]))

with open('event_datafile_new.csv', 'r', encoding = 'utf8') as f:
    print(sum(1 for line in f))

"""# Part II. Complete the Apache Cassandra coding portion of your project. 

## CSV file <font color=red>event_datafile_new.csv</font> is located in the Workspace directory.  The event_datafile_new.csv contains the following columns: 
- artist 
- firstName of user
- gender of user
- item number in session
- last name of user
- length of the song
- level (paid or free song)
- location of the user
- sessionId
- song title
- userId

The image below is a screenshot of what the denormalized data should appear like in the <font color=red>**event_datafile_new.csv**</font> after the code above is run:<br>

<img src="images/image_event_datafile_new.jpg">

## Begin writing your Apache Cassandra code in the cells below

#### Creating a Cluster
1. make a connection to a Cassandra instance in local machine (127.0.0.1)
2. To establish connection and begin executing queries, need a session
"""

from cassandra.cluster import Cluster
cluster = Cluster()

session = cluster.connect()

"""#### Create Keyspace"""

try:
    session.execute("""
    CREATE KEYSPACE IF NOT EXISTS sparkifydb 
    WITH REPLICATION = 
    { 'class' : 'SimpleStrategy', 'replication_factor' : 1 }"""
)

except Exception as e:
    print(e)

"""#### Set Keyspace to the keyspace specified above"""

try:
    session.set_keyspace('sparkifydb')
except Exception as e:
    print(e)

"""### create tables to run the following queries. one tables on a query

## Create queries to ask the following three questions of the data

### 1. Give me the artist, song title and song's length in the music app history that was heard during  sessionId = 338, and itemInSession  = 4

#### Create table statement 
        table name: "musicapp_history_by_session_by_item"
        primary keys: session_id, item_in_session
The columns are ordered by the parition key, clustering column then all of the returned values
* Column 1 = session_id
* Column 2 = item_in_session
* Column 3 = artist_name
* Column 4 = song
* Column 5 = length
* Primary key = (session_id, item_in_session)
"""

query = "CREATE TABLE IF NOT EXISTS musicapp_history_by_session_by_item"
query = query + "(session_id int, item_in_session int, artist_name text, song text, length float, \
                   PRIMARY KEY (session_id, item_in_session))"
try:
    session.execute(query)
except Exception as e:
    print(e)

"""Set the CSV File: 
INSERT statements into the `query` variable
Assign which column element should be assigned for each column in the INSERT statement.
"""

file = 'event_datafile_new.csv'

with open(file, encoding = 'utf8') as f:
    csvreader = csv.reader(f)
    next(csvreader)
    for line in csvreader:
        query = "INSERT INTO musicapp_history_by_session_by_item (session_id, item_in_session, artist_name,song,length)"
        query = query + " VALUES (%s, %s, %s, %s, %s);"
        session.execute(query, (int(line[8]), int(line[3]), line[0], line[9], float(line[5])))

"""#### SELECT statement to verify the data has been inserted into the table"""

query = "select artist_name, song,length from musicapp_history_by_session_by_item WHERE session_id = 338 and item_in_session = 4"
try:
    rows = session.execute(query)
except Exception as e:
    print(e)
    
for row in rows:
    print (row.artist_name,",", row.song,",", row.length)

"""when session Id= , 
* artist name: Faithless  
* song title: Music Matters (Mark Knight Dub)
* lenth: 495.30731201171875

### COPY AND REPEAT THE ABOVE THREE CELLS FOR EACH OF THE THREE QUESTIONS

At sessionId=338 and itemInsession=4, the artist name is 'Faithless', the song title is 'Music Matters (Mark Knight Dub)' and the length of the song is 495.307312.

#### Query 2: Give me only the following: name of artist, song (sorted by itemInSession) and user (first and last name) for userid = 10, sessionid = 182
#### Create Table 
        table name: "musicapp_history_by_user_by_session"
        primary keys: user_id, session_id
The columns are ordered by the parition key, clustering column then all of the returned values
* Column 1 = user_id
* Column 2 = session_id
* Column 3 = item_in_session
* Column 4 = artist_name
* Column 5 = song
* Column 6 = first_name
* Column 7 = last_name

Primary key = ((user_id, session_id), item_in_session)
(user_id, session_id) are the partition composite key.
item_in_session is clustering column
"""

query = "CREATE TABLE IF NOT EXISTS musicapp_history_by_user_by_session "
query = query + "(user_id int, session_id int, item_in_session int,artist_name text, song text, first_name text, \
                   last_name text, PRIMARY KEY ((user_id, session_id),item_in_session))"
try:
    session.execute(query)
except Exception as e:
    print(e)
with open(file, encoding = 'utf8') as f:
    csvreader = csv.reader(f)
    next(csvreader)
    for line in csvreader:
        query = "INSERT INTO musicapp_history_by_user_by_session (user_id, session_id, item_in_session, artist_name, song, first_name, last_name)"
        query = query + "VALUES (%s, %s, %s, %s, %s, %s, %s)"
        session.execute(query, (int(line[10]), int(line[8]), int(line[3]),line[0],line[9],line[1],line[4]))
        
query = "select artist_name,song,first_name,last_name from musicapp_history_by_user_by_session WHERE user_id = 10 and session_id = 182"
try:
    rows = session.execute(query)
except Exception as e:
    print(e)
    
for row in rows:
    print (row.artist_name, ",", row.song, ",", row.first_name,row.last_name)

"""There are four rows: artist name, song title, user name (first name last name)
* Down To The Bone , Keep On Keepin' On , Sylvie Cruz
* Three Drives , Greece 2000 , Sylvie Cruz
* Sebastien Tellier , Kilometer , Sylvie Cruz
* Lonnie Gordon , Catch You Baby (Steve Pitron & Max Sanna Radio Edit) , Sylvie Cruz

### Query3. 3. Give me every user name (first and last) in my music app history who listened to the song 'All Hands Against His Own'
#### Creat Table 
        table name: "musicapp_history_by_song"
        primary keys: song, user_id
The columns are ordered by the parition key, clustering column then all of the returned values
* Column 1 = song
* Column 2 = user_id
* Column 3 = first_name
* Column 3 = last_name
* Primary key = (song, user_id)
"""

query = "CREATE TABLE IF NOT EXISTS musicapp_history_by_song "
query = query + "(song text, user_id int, first_name text, last_name text, \
                  PRIMARY KEY (song, user_id))"
try:
    session.execute(query)
except Exception as e:
    print(e)   

with open(file, encoding = 'utf8') as f:
    csvreader = csv.reader(f)
    next(csvreader) 
    for line in csvreader:
        query = "INSERT INTO musicapp_history_by_song (song, user_id, first_name, last_name)"
        query = query + "VALUES (%s, %s, %s, %s)"
        session.execute(query, (line[9], int(line[10]), line[1], line[4]))

query = "select first_name, last_name from musicapp_history_by_song WHERE song = 'All Hands Against His Own'"
try:
    rows = session.execute(query)
except Exception as e:
    print(e)
    
for row in rows:
    print (row.first_name,  row.last_name)

"""Three users listened to the song 'All Hands Against His Own': 
* 'Jacqueline Lynch' 
* 'Sara Johnson'
* 'Tegan Levine'.

### Drop the tables before closing out the sessions
"""

try:
    session.execute("DROP TABLE musicapp_history_by_session_by_item")
    session.execute("DROP TABLE musicapp_history_by_user_by_session")
    session.execute("DROP TABLE musicapp_history_by_song")
except Exception as e:
    print(e)

"""### Close the session and cluster connectionÂ¶"""

session.shutdown()
cluster.shutdown()
